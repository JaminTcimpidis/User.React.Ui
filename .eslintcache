[{"/Users/jduncan/Desktop/GitHub/User.React.Ui/src/App.tsx":"1","/Users/jduncan/Desktop/GitHub/User.React.Ui/src/index.tsx":"2","/Users/jduncan/Desktop/GitHub/User.React.Ui/src/reportWebVitals.ts":"3","/Users/jduncan/Desktop/GitHub/User.React.Ui/src/user/user.tsx":"4","/Users/jduncan/Desktop/GitHub/User.React.Ui/src/user/user-list.tsx":"5","/Users/jduncan/Desktop/GitHub/User.React.Ui/src/user/add-user.tsx":"6","/Users/jduncan/Desktop/GitHub/User.React.Ui/src/api/user.ts":"7","/Users/jduncan/Desktop/GitHub/User.React.Ui/src/utilities/getConfiguration.ts":"8","/Users/jduncan/Desktop/GitHub/User.React.Ui/src/home/home.tsx":"9","/Users/jduncan/Desktop/GitHub/User.React.Ui/src/auth/authProvider.tsx":"10","/Users/jduncan/Desktop/GitHub/User.React.Ui/src/auth/auth.ts":"11","/Users/jduncan/Desktop/GitHub/User.React.Ui/src/constants.ts":"12","/Users/jduncan/Desktop/GitHub/User.React.Ui/src/auth/utils.ts":"13","/Users/jduncan/Desktop/GitHub/User.React.Ui/src/auth/authClient.ts":"14","/Users/jduncan/Desktop/GitHub/User.React.Ui/src/auth/authContext.ts":"15","/Users/jduncan/Desktop/GitHub/User.React.Ui/src/hooks/useAuth.tsx":"16","/Users/jduncan/Desktop/GitHub/User.React.Ui/src/home/header.tsx":"17","/Users/jduncan/Desktop/GitHub/User.React.Ui/src/auth/authedRoute.tsx":"18","/Users/jduncan/Desktop/GitHub/User.React.Ui/src/home/login.tsx":"19","/Users/jduncan/Desktop/GitHub/User.React.Ui/src/hooks/useConfig.tsx":"20","/Users/jduncan/Desktop/GitHub/User.React.Ui/src/hooks/create-user-hook.tsx":"21"},{"size":761,"mtime":1629954353350,"results":"22","hashOfConfig":"23"},{"size":746,"mtime":1629954139826,"results":"24","hashOfConfig":"23"},{"size":425,"mtime":1607841838200,"results":"25","hashOfConfig":"23"},{"size":683,"mtime":1629954423488,"results":"26","hashOfConfig":"23"},{"size":1417,"mtime":1629954453448,"results":"27","hashOfConfig":"23"},{"size":1067,"mtime":1629954453447,"results":"28","hashOfConfig":"23"},{"size":1341,"mtime":1629954144928,"results":"29","hashOfConfig":"23"},{"size":1467,"mtime":1630112773531,"results":"30","hashOfConfig":"23"},{"size":2123,"mtime":1630386206153,"results":"31","hashOfConfig":"23"},{"size":1379,"mtime":1629954139818,"results":"32","hashOfConfig":"23"},{"size":1997,"mtime":1629954139816,"results":"33","hashOfConfig":"23"},{"size":134,"mtime":1629954139820,"results":"34","hashOfConfig":"23"},{"size":2741,"mtime":1629954139820,"results":"35","hashOfConfig":"23"},{"size":6831,"mtime":1629954139817,"results":"36","hashOfConfig":"23"},{"size":148,"mtime":1629954139817,"results":"37","hashOfConfig":"23"},{"size":1749,"mtime":1629954139825,"results":"38","hashOfConfig":"23"},{"size":1393,"mtime":1630384419710,"results":"39","hashOfConfig":"23"},{"size":509,"mtime":1629954139819,"results":"40","hashOfConfig":"23"},{"size":1026,"mtime":1629954139822,"results":"41","hashOfConfig":"23"},{"size":453,"mtime":1629954139826,"results":"42","hashOfConfig":"23"},{"size":913,"mtime":1629954139824,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"1ha2zb9",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"46"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"46"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"46"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"46"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"46"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"46"},"/Users/jduncan/Desktop/GitHub/User.React.Ui/src/App.tsx",[],["93","94"],"/Users/jduncan/Desktop/GitHub/User.React.Ui/src/index.tsx",[],"/Users/jduncan/Desktop/GitHub/User.React.Ui/src/reportWebVitals.ts",[],"/Users/jduncan/Desktop/GitHub/User.React.Ui/src/user/user.tsx",[],"/Users/jduncan/Desktop/GitHub/User.React.Ui/src/user/user-list.tsx",[],"/Users/jduncan/Desktop/GitHub/User.React.Ui/src/user/add-user.tsx",[],"/Users/jduncan/Desktop/GitHub/User.React.Ui/src/api/user.ts",[],"/Users/jduncan/Desktop/GitHub/User.React.Ui/src/utilities/getConfiguration.ts",[],"/Users/jduncan/Desktop/GitHub/User.React.Ui/src/home/home.tsx",["95","96","97","98"],"/Users/jduncan/Desktop/GitHub/User.React.Ui/src/auth/authProvider.tsx",["99"],"import * as React from 'react';\nimport { AuthClient } from './authClient';\nimport { authenticate } from './auth';\nimport { AuthContext } from './authContext';\n\nexport interface AuthProviderProps{\n  config: AppConfig;\n  children?: React.ReactNode;\n}\n\nexport interface AuthProviderState {\n  authClient: AuthClient;\n  isAuthorized: boolean;\n  isLoading: boolean;\n  error: Error | null;\n  post_logout_redirect_uri: string;\n}\n\n\nconst AuthProvider = (props: AuthProviderProps) => { \n  const [authState, setAuthState] = React.useState({\n    isAuthorized: false,\n    isLoading: true,\n    post_logout_redirect_uri: window.origin\n  } as AuthProviderState)\n\n  React.useEffect(() => {\n    const getAuth = async () => {\n      const { config } = props;\n      let {isAuthorized, isLoading, post_logout_redirect_uri} = authState;\n  \n      isLoading = false;\n  \n      const {authenticated, error, authClient} = await authenticate(config);\n  \n      if(authenticated && !error){\n        isAuthorized = true;\n      }\n  \n      setAuthState({\n        authClient,\n        isLoading,\n        error: error ? new Error(error.message as string) : null,\n        isAuthorized,\n        post_logout_redirect_uri\n      })\n    }\n    \n    getAuth();\n  },[])\n\n  return (\n    <AuthContext.Provider value={authState.authClient}>\n      {props.children}\n    </AuthContext.Provider>\n  )\n};\n\nexport default AuthProvider;","/Users/jduncan/Desktop/GitHub/User.React.Ui/src/auth/auth.ts",["100"],"import createClient, { AuthClient } from './authClient';\nimport { localStorageAuthKey } from '../constants';\nimport { clearStoredJwt, decodeExpirationTime, isAuthed, isStoredTokenValidForOkta, storeJwt } from './utils';\n\nexport type Authenticate = Promise<{\n  authenticated: boolean;\n  error: {\n    message: string | null;\n  } | null,\n  authClient: AuthClient,\n}>;\n\nconst Authenticate = Promise;\n\nexport const authenticate = async (appConfig: AppConfig): Authenticate => {\n  const scopes = ['openid', 'profile', 'email', 'groups'] \n  const hasAccessTokenInParams = window.location.href.includes('?code=');\n\n  if(hasAccessTokenInParams){\n    clearStoredJwt();\n  }\n\n  const authData = localStorage.getItem(localStorageAuthKey);\n  let auth = null;\n  try {\n    auth = authData ? JSON.parse(authData) : null;\n  } catch {\n    // swallow\n  }\n\n  let accessToken;\n  let idToken;\n\n  if (isStoredTokenValidForOkta(auth, appConfig.oAuthDomain)) {\n    accessToken = {\n      accessToken: auth.accessToken,\n      expiresAt: decodeExpirationTime(auth.accessToken) as number,\n      scopes\n    }\n    idToken = {\n      idToken: auth.identityToken,\n      expiresAt: decodeExpirationTime(auth.identityToken) as number,\n      scopes\n    }\n  }\n  else {\n    clearStoredJwt();\n  }\n\n  const authClient = createClient(appConfig, accessToken, idToken)\n\n  authClient.onRenewed((accessToken?: string, identityToken?: string) => {\n    storeJwt(accessToken, identityToken);\n  });\n\n  if(hasAccessTokenInParams || isAuthed()){\n    try {\n      const auth = await authClient.ensureAuthed();\n      storeJwt(auth.accessToken, auth.identityToken);\n      return {\n        authenticated: true,\n        error: null,\n        authClient,\n      }\n    }\n    catch (err){\n      const message = err.message ? err.message : err.toString();\n      return {\n        authenticated: false,\n        error: {\n          message\n        },\n        authClient,\n      }\n    }\n  }\n\n  return {\n    authenticated: false,\n    error: null,\n    authClient,\n  }\n}\n","/Users/jduncan/Desktop/GitHub/User.React.Ui/src/constants.ts",[],"/Users/jduncan/Desktop/GitHub/User.React.Ui/src/auth/utils.ts",[],"/Users/jduncan/Desktop/GitHub/User.React.Ui/src/auth/authClient.ts",["101"],"import { OktaAuth, AccessToken, IDToken, UserClaims, Tokens } from \"@okta/okta-auth-js\";\nimport { setRetry, getRetry, setStateSession, removeRetry, clearStoredJwt } from \"./utils\";\nimport decode from 'jwt-decode';\n\nconst accessTokenKey = \"accessToken\";\nconst idTokenKey = \"idToken\";\n\nexport interface OAuthConfig { \n  oAuthClientId: string,\n  oAuthDomain: string,\n  redirectUri: string,\n  scopes: string[],\n}\n\nexport interface RenewTokenResult{\n  accessToken: string,\n  identityToken?: string,\n  identity?: UserClaims,\n}\n\nexport interface QueryParams {\n  post_logout_redirect_uri: string,\n}\n\nexport interface AuthClient {\n  logout: (queryParams: QueryParams) => Promise<void>,\n  login: () => Promise<void>\n  getIdentity: () => Promise<string>\n  getAccessToken: () => Promise<string>\n  getIdentityToken: () => Promise<string>\n  ensureAuthed: () => Promise<RenewTokenResult>,\n  onRenewed: (callback: (accessToken?: string, identityToken?: string) => void) => void,\n}\n\nexport interface Token {\n  scopes: string[];\n  expiresAt: number;\n  accessToken?: string;\n  idToken?: string;\n}\n\nexport type AuthData = {accessToken?: string, identityToken?: string } | null;\n\nconst createClient = (config: OAuthConfig, accessToken?: Token, idToken?: Token): AuthClient => {\n \n  if (!config) {\n    throw new Error('missing configuration')\n  }\n  const authRetryKey = `${config.oAuthClientId}-auth-retry`;\n  setRetry(authRetryKey, 0);\n\n  const oidc = {\n    clientId: config.oAuthClientId,\n    issuer: config.oAuthDomain,\n    redirectUri: config.redirectUri,\n    scopes: ['openid', 'profile', 'email'],\n    pkce: true,\n    disableHttpsCheck: false,\n    tokenManager:{\n      storage: 'memory',\n      expiredEarlySeconds: 120,\n      autoRenew: true,\n    },\n    responseType:['id_token', 'token']\n  }\n\n  const oktaAuthClient = new OktaAuth(oidc);\n\n  if(accessToken || idToken) {\n    try {\n      oktaAuthClient.tokenManager.setTokens({accessToken: accessToken, idToken: idToken } as Tokens);\n    } catch (err){\n      throw new Error(err);\n    }\n    \n  }\n\n  oktaAuthClient.tokenManager.on('expired', async(key: string)=> {\n    try {\n      await oktaAuthClient.tokenManager.renew(key);\n    }\n    catch (err) {\n      client.login();\n      throw new Error(err)\n    }\n  })\n\n  const client = {\n    logout: async(queryParams: QueryParams) => {\n      if (!queryParams.post_logout_redirect_uri){\n        throw new Error('Please specify queryParams.post_logout_redirect_url so we can redirect')\n      }\n      await oktaAuthClient.signOut();\n      clearStoredJwt();\n      window.location.assign(queryParams.post_logout_redirect_uri);\n    },\n    login: async() => {\n      const url = window.location.href.replace(new RegExp(document.baseURI, 'gi'), '') || document.baseURI;\n      const state = setStateSession(url);\n\n      await oktaAuthClient.token.getWithRedirect( {\n        scopes: ['openid','email','profile'],\n        state: state\n      });\n    },\n    getIdentity: async(): Promise<string> => {\n      let token = await oktaAuthClient.tokenManager.get(idTokenKey);\n      return decode((token as IDToken).idToken);\n    },\n    getAccessToken: async(): Promise<string> => {\n      let token = await oktaAuthClient.tokenManager.get(accessTokenKey);\n      return (token as AccessToken).accessToken;\n    },\n    getIdentityToken: async() => {\n      let token = await oktaAuthClient.tokenManager.get(idTokenKey);\n      return (token as IDToken).idToken;\n    },\n    ensureAuthed: async(): Promise<RenewTokenResult> => {\n      if(!window.location.href.includes('?code=')){\n        setRetry(authRetryKey, Number(getRetry(authRetryKey)) + 1)\n        try{\n          const accessTokenObject = await oktaAuthClient.tokenManager.get(accessTokenKey);\n          const identityTokenObject = await oktaAuthClient.tokenManager.get(idTokenKey);\n          if (accessTokenObject && identityTokenObject) {\n            return {\n              accessToken: (accessTokenObject as AccessToken).accessToken,\n              identityToken: (identityTokenObject as IDToken).idToken,\n              identity: (identityTokenObject as IDToken).claims,\n            };\n          }\n          else {\n            const exists = await oktaAuthClient.session.exists();\n            if(exists) {\n              const session = await oktaAuthClient.session.get();\n              if(session.status != \"ACTIVE\") {\n                throw Error(\"no token in query and session is not active\")\n              }\n              return await refreshTokensWithSession(oktaAuthClient, config, session)\n            }\n            throw Error('no token in query and session did not exist')\n          }\n        } \n        catch (err){\n          if(getRetry(authRetryKey) === '3') {\n            throw new Error(`exceed maximum retrys. ${err}`)\n          }\n          client.login();\n          throw new Error(err)\n        }\n      }\n      else{\n        setRetry(authRetryKey, Number(getRetry(authRetryKey)) + 1 )\n        try{\n          return await parseFromUrl(oktaAuthClient, authRetryKey)\n        }\n        catch (err){\n          throw new Error(\"failed to parse token from url\")\n        }\n      }\n    },\n    onRenewed: (callback: (accessToken?: string, idToken?: string) =>  void) => {\n      oktaAuthClient.tokenManager.on('renewed', async (key: string, token: Token) => {\n        const accessToken = (key === accessTokenKey) ? token.accessToken : await client.getAccessToken();\n        const identityToken = (key === idTokenKey) ? token.idToken : await client.getIdentityToken();\n\n        callback(accessToken, identityToken);\n      })\n    }\n  }\n  return client;\n}\n\nconst parseFromUrl = async (oktaAuthClient: OktaAuth, authRetryKey: string): Promise<RenewTokenResult> => {\n  const tokens = await oktaAuthClient.token.parseFromUrl();\n  const accessToken = tokens.tokens.accessToken as AccessToken;\n  const idToken = tokens.tokens.idToken as IDToken;\n\n  oktaAuthClient.tokenManager.add(accessTokenKey, accessToken);\n  oktaAuthClient.tokenManager.add(idTokenKey, idToken);\n\n  removeRetry(authRetryKey);\n  return {\n    accessToken: accessToken?.accessToken,\n    identityToken: idToken?.idToken,\n    identity: idToken?.claims,\n  };\n}\n\nconst refreshTokensWithSession = async (oktaAuthClient: OktaAuth, config: OAuthConfig, session: any): Promise<RenewTokenResult> => {\n  const tokens = await oktaAuthClient.token.getWithoutPrompt({\n    scopes: config.scopes,\n    responseType: ['token', 'id_token'],\n    sessionToken: session.id,\n  })\n\n  oktaAuthClient.tokenManager.add(accessTokenKey, tokens.tokens.accessToken as AccessToken);\n  oktaAuthClient.tokenManager.add(idTokenKey, tokens.tokens.idToken as IDToken);\n\n  return {\n    accessToken: tokens?.tokens?.accessToken?.accessToken,\n    identityToken: tokens?.tokens?.idToken?.idToken,\n    identity: tokens?.tokens?.idToken?.claims,\n  } as RenewTokenResult;\n}\n\nexport default createClient;","/Users/jduncan/Desktop/GitHub/User.React.Ui/src/auth/authContext.ts",[],"/Users/jduncan/Desktop/GitHub/User.React.Ui/src/hooks/useAuth.tsx",[],"/Users/jduncan/Desktop/GitHub/User.React.Ui/src/home/header.tsx",["102","103"],"/Users/jduncan/Desktop/GitHub/User.React.Ui/src/auth/authedRoute.tsx",[],"/Users/jduncan/Desktop/GitHub/User.React.Ui/src/home/login.tsx",["104"],"import React, {useEffect, useState} from \"react\";\nimport { Redirect } from \"react-router\";\nimport { localStorageAuthRedirectUrl } from \"../constants\";\nimport { useAuth } from \"../hooks/useAuth\";\n\nconst Login = ():JSX.Element => {\n  const { isAuthed, sendToOktaLogin } = useAuth();\n  const [isComplete, setIsComplete] = useState<boolean>(false);\n\n  useEffect(() => {\n    const login = async (): Promise<void> => {\n      await sendToOktaLogin();\n      setIsComplete(true);\n    }\n\n    if (!isAuthed()){\n      login();\n    } else {\n      setIsComplete(true);\n    }\n  },[]);\n\n  if(!isComplete){\n    return <span>loading</span>\n  }\n\n  let redirectHash = \"/\"\n  const redirectUrl = localStorage.getItem(localStorageAuthRedirectUrl);\n  if(redirectUrl) {\n    const redirectUrlArray: string[] = redirectUrl.split('#', 2);\n    if(redirectUrlArray.length === 2){\n      redirectHash = redirectUrlArray[1]\n      localStorage.removeItem(localStorageAuthRedirectUrl);\n    }\n  }\n\n  return <Redirect to={redirectHash} />\n}\n\nexport default Login;","/Users/jduncan/Desktop/GitHub/User.React.Ui/src/hooks/useConfig.tsx",["105"],"import React, { useState } from 'react'\nimport { useEffect } from 'react';\nimport { getConfiguration } from '../utilities/getConfiguration'\n\nexport const useConfig = () => {\n  const [config, setConfig] = useState({} as AppConfig);  \n\n  useEffect(() => {\n    const getConfig = async():Promise<void> => {\n      const freshConfig = await getConfiguration();\n      setConfig(freshConfig);\n    };\n    getConfig();\n  },[config])\n  \n  return {\n    config\n  }\n}","/Users/jduncan/Desktop/GitHub/User.React.Ui/src/hooks/create-user-hook.tsx",["106"],"import React, { useState } from 'react';\nimport { CreateUserRequest } from '../../dtos/user.dtos';\nimport { AddUser } from '../api/user';\n\nexport const useCreateUserForm = (callback: any) => {\n  const newUser = {\n    firstName: \"\",\n    lastName: \"\",\n    email: \"\"\n  } as CreateUserRequest\n\n  const [inputs, setInputs] = useState({\n    ...newUser\n  } as CreateUserRequest);\n\n  const handleSubmit = async (event: any) => {\n    if (event) {\n      event.preventDefault();\n    }\n    const user : CreateUserRequest = {\n      firstName :inputs.firstName,\n      lastName : inputs.lastName,\n      email: inputs.email,\n    };\n\n    await AddUser(user);\n    callback();\n    setInputs({...newUser})\n  }\n  const handleInputChange = (event: any) => {\n    event.persist();\n    setInputs(inputs => ({...inputs, [event.target.name]: event.target.value}));\n  }\n\n  return {\n    handleSubmit,\n    handleInputChange,\n    inputs\n  };\n}\n",{"ruleId":"107","replacedBy":"108"},{"ruleId":"109","replacedBy":"110"},{"ruleId":"111","severity":1,"message":"112","line":6,"column":8,"nodeType":"113","messageId":"114","endLine":6,"endColumn":21},{"ruleId":"115","severity":1,"message":"116","line":17,"column":9,"nodeType":"117","endLine":17,"endColumn":55},{"ruleId":"118","severity":1,"message":"119","line":45,"column":23,"nodeType":"120","messageId":"121","endLine":45,"endColumn":25},{"ruleId":"118","severity":1,"message":"119","line":45,"column":59,"nodeType":"120","messageId":"121","endLine":45,"endColumn":61},{"ruleId":"122","severity":1,"message":"123","line":50,"column":5,"nodeType":"124","endLine":50,"endColumn":7,"suggestions":"125"},{"ruleId":"126","severity":1,"message":"127","line":13,"column":7,"nodeType":"113","messageId":"128","endLine":13,"endColumn":19},{"ruleId":"118","severity":1,"message":"119","line":135,"column":33,"nodeType":"120","messageId":"121","endLine":135,"endColumn":35},{"ruleId":"111","severity":1,"message":"129","line":5,"column":8,"nodeType":"113","messageId":"114","endLine":5,"endColumn":12},{"ruleId":"115","severity":1,"message":"116","line":40,"column":9,"nodeType":"117","endLine":40,"endColumn":53},{"ruleId":"122","severity":1,"message":"130","line":21,"column":5,"nodeType":"124","endLine":21,"endColumn":7,"suggestions":"131"},{"ruleId":"111","severity":1,"message":"132","line":1,"column":8,"nodeType":"113","messageId":"114","endLine":1,"endColumn":13},{"ruleId":"111","severity":1,"message":"132","line":1,"column":8,"nodeType":"113","messageId":"114","endLine":1,"endColumn":13},"no-native-reassign",["133"],"no-negated-in-lhs",["134"],"@typescript-eslint/no-unused-vars","'profile_image' is defined but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook React.useEffect has missing dependencies: 'authState' and 'props'. Either include them or remove the dependency array.","ArrayExpression",["135"],"@typescript-eslint/no-redeclare","'Authenticate' is already defined.","redeclared","'logo' is defined but never used.","React Hook useEffect has missing dependencies: 'isAuthed' and 'sendToOktaLogin'. Either include them or remove the dependency array.",["136"],"'React' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"137","fix":"138"},{"desc":"139","fix":"140"},"Update the dependencies array to be: [authState, props]",{"range":"141","text":"142"},"Update the dependencies array to be: [isAuthed, sendToOktaLogin]",{"range":"143","text":"144"},[1220,1222],"[authState, props]",[565,567],"[isAuthed, sendToOktaLogin]"]
